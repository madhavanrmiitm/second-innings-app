meta {
  name: POST_VerifyToken
  type: http
  seq: 1
}

post {
  url: {{baseUrl}}{{apiPrefix}}/auth/verify-token
  body: json
  auth: none
}

body:json {
  {
    "id_token": "{{userToken}}"
  }
}

tests {
  test("Status code is 200 or 201", function() {
    expect(res.getStatus()).to.be.oneOf([200, 201]);
  });

  test("Response structure is correct for registered user (200)", function() {
    if (res.getStatus() === 200) {
      expect(res.getBody().data).to.have.property('user');
      expect(res.getBody().data).to.have.property('is_new_user');

      const user = res.getBody().data.user;
      expect(user).to.have.property('id');
      expect(user).to.have.property('gmail_id');
      expect(user).to.have.property('firebase_uid');
      expect(user).to.have.property('full_name');
      expect(user).to.have.property('created_at');
      expect(user).to.have.property('updated_at');
    }
  });

  test("Response structure is correct for unregistered user (201)", function() {
    if (res.getStatus() === 201) {
      expect(res.getBody().data).to.have.property('user_info');
      expect(res.getBody().data).to.have.property('is_registered');
      expect(res.getBody().data.is_registered).to.be.false;

      const userInfo = res.getBody().data.user_info;
      expect(userInfo).to.have.property('gmail_id');
      expect(userInfo).to.have.property('firebase_uid');
      expect(userInfo).to.have.property('full_name');
      expect(userInfo).to.not.have.property('id');
    }
  });
}
