meta {
  name: POST_RegisterUser
  type: http
  seq: 2
}

post {
  url: {{baseUrl}}{{apiPrefix}}/auth/register
  body: json
  auth: none
}

body:json {
  {
    "id_token": "{{unregisteredToken}}",
    "full_name": "John Doe Test User",
    "role": "caregiver",
    "youtube_url": "https://youtube.com/watch?v=example",
    "date_of_birth": "1990-01-15"
  }
}

tests {
  test("Status code is 201 for successful registration", function() {
    expect(res.getStatus()).to.equal(201);
  });

  test("Response has success message", function() {
    expect(res.getBody().message).to.equal("User registered successfully.");
  });

  test("Response contains user data", function() {
    expect(res.getBody().data).to.have.property('user');
    expect(res.getBody().data).to.have.property('message');
  });

  test("User has all required fields", function() {
    const user = res.getBody().data.user;
    expect(user).to.have.property('id');
    expect(user).to.have.property('gmail_id');
    expect(user).to.have.property('firebase_uid');
    expect(user).to.have.property('full_name');
    expect(user).to.have.property('role');
    expect(user).to.have.property('youtube_url');
    expect(user).to.have.property('date_of_birth');
    expect(user).to.have.property('description');
    expect(user).to.have.property('tags');
    expect(user).to.have.property('created_at');
    expect(user).to.have.property('updated_at');
  });

  test("User data matches input (Test Mode - AI processing skipped)", function() {
    const user = res.getBody().data.user;
    expect(user.full_name).to.equal("John Doe Test User");
    expect(user.role).to.equal("caregiver");
    expect(user.youtube_url).to.equal("https://youtube.com/watch?v=example");
    expect(user.date_of_birth).to.equal("1990-01-15");

    // In test mode, AI processing is skipped, so description and tags may be null or use provided values
    // This is expected behavior for test mode
  });
}
