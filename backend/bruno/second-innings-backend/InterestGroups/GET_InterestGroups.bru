meta {
  name: GET_InterestGroups
  type: http
  seq: 1
}

get {
  url: {{baseUrl}}{{apiPrefix}}/interest-groups
  body: none
  auth: bearer
}

auth:bearer {
  token: {{adminToken}}
}

tests {
  test("Status code is 200 for successful interest groups retrieval", function() {
    expect(res.getStatus()).to.equal(200);
  });

  test("Response has success message", function() {
    expect(res.getBody().message).to.contain("successfully");
  });

  test("Response contains interest groups data", function() {
    expect(res.getBody().data).to.have.property('interest_groups');
    expect(res.getBody().data.interest_groups).to.be.an('array');
  });

  test("Each interest group has required fields", function() {
    if (res.getBody().data.interest_groups.length > 0) {
      const group = res.getBody().data.interest_groups[0];
      expect(group).to.have.property('id');
      expect(group).to.have.property('title');
      expect(group).to.have.property('description');
      expect(group).to.have.property('links');
      expect(group).to.have.property('status');
      expect(group).to.have.property('created_by');
      expect(group).to.have.property('created_at');
      expect(group).to.have.property('updated_at');
      expect(group).to.have.property('timing');
    }
  });

  test("Test data includes interest groups with descriptions", function() {
    const groups = res.getBody().data.interest_groups;
    const groupsWithDescription = groups.filter(group => group.description);
    expect(groupsWithDescription.length).to.be.greaterThan(0);
  });

  test("Test data includes interest groups with links", function() {
    const groups = res.getBody().data.interest_groups;
    const groupsWithLinks = groups.filter(group => group.links);
    expect(groupsWithLinks.length).to.be.greaterThan(0);
  });

  test("Test data includes interest groups with different statuses", function() {
    const groups = res.getBody().data.interest_groups;
    const statuses = groups.map(group => group.status);
    expect(statuses).to.include('active');
    expect(statuses).to.include('inactive');
  });

  test("Test data includes interest groups with timing", function() {
    const groups = res.getBody().data.interest_groups;
    const groupsWithTiming = groups.filter(group => group.timing);
    expect(groupsWithTiming.length).to.be.greaterThan(0);
  });

  test("Test data includes interest groups without timing", function() {
    const groups = res.getBody().data.interest_groups;
    const groupsWithoutTiming = groups.filter(group => !group.timing);
    expect(groupsWithoutTiming.length).to.be.greaterThan(0);
  });
}
